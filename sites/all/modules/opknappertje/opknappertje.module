<?php

/*
* Implements hook_menu_alter.
*/
function opknappertje_menu_alter(&$items) {
  $active_signup_campaign = _opknappertje_get_active_signup_period(time());

  if ($active_signup_campaign == FALSE) {
    $items['node/add/contribution']['access callback'] = FALSE;
    menu_rebuild();
  }

}


function opknappertje_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // If we're resetting password, then give a message.
  if (isset($_SESSION['form_validate'])) {
    $_SESSION['form_validate'] = FALSE;
  }

  hide($form['picture']);
  hide($form['account']['pass']);
  hide($form['account']['current_pass']);
  hide($form['timezone']);

}

function opknappertje_init() {
  global $user;

  // Get the url for the change password screen.
  $user_edit_url = preg_replace('/!uid/', $user->uid, 'user/!uid/edit');

  // Redirects should only happen if the user is logged in and not on the user edit page
  if (user_is_logged_in() && current_path() != $user_edit_url && current_path() != '/user/logout') {
    $redirect = FALSE;

    // Check to see if a field submission is empty
    $pending_change = _opknappertje_force_field_submission_check($user);

    // if pending change set redirect to true
    if ($pending_change) {
      $redirect = TRUE;
    }

    //
    if ($redirect) {
      // We put it in a session variable, because we can't determine
      // here if we need to display it.
      $_SESSION['form_validate'] = TRUE;

      // Redirect the user to the change password page
      drupal_goto($user_edit_url);
    }
  }
}

function opknappertje_form_contribution_node_form_alter(&$form, $form_state, $form_id) {
  $form['title']['#default_value'] = 'title';
  hide($form['title']);
}

function opknappertje_node_presave($node) {
  if ($node->type == 'contribution') {
    $user = user_load($node->uid);
    print '<h1>'.$user->name.'</h1>';
    $node->title = t('Een kijkje in de keuken van ') . $user->name;
  }
}

function opknappertje_user_update(&$edit, $account, $category) {
  $signup_campaign = _opknappertje_get_active_signup_period(time());
  $voting_campaign = _opknappertje_get_active_voting_period(time());

  // This is a signup campaign
  if ($signup_campaign != FALSE && $voting_campaign == FALSE) {
    drupal_set_message('Je kunt nu een inzending doen via "Doe mee!" in het hoofdmenu.');
  }

  // This is a voting campaign
  if ($signup_campaign == FALSE && $voting_campaign != FALSE) {
    drupal_set_message('Je kunt nu stemmen op je favoriet via "Campagnes" in het hoofdmenu.');
  }

}

function _opknappertje_force_field_submission_check($user) {
  // Now check if there is a field entry
  $user = user_load($user->uid);
  $field_entry = $user->field_city[LANGUAGE_NONE][0]['value'];

  // If there is an entry in the password reset table for this UID
  // that means the UID already changed the password.
  if ($field_entry) {
    return FALSE;
  }

  return TRUE;
}

function opknappertje_block_info() {
  $blocks['hero_block'] = array(
    'info' => t('Hero block'),
    'region' => 'header',
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['hero_block_default'] = array(
    'info' => t('Hero block default'),
    'region' => 'header',
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['hero_block_campaign'] = array(
    'info' => t('Hero block campaign'),
    'region' => 'header',
    'cache' => DRUPAL_NO_CACHE,
    'attributes' => array('classes'=>'')
  );
  $blocks['hero_block_campaign_phases'] = array(
    'info' => t('Campaign phases'),
    'region' => 'content_bottom',
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['hero_block_campaign_countdown'] = array(
    'info' => t('Hero block campaign countdown'),
    'region' => 'sidebar_first',
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['facebook_comments_content'] = array(
    'info' => t('Facebook Comments'),
    'region' => 'content_bottom',
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

function opknappertje_preprocess_block(&$variables) {
  if (strtolower($variables['block']->delta) == 'votes-vote_users') {
    $flag = flag_get_flag('vote', arg(1));
    $vote_count = $flag->get_count(arg(1));

    $block_title = ($vote_count == 1 ) ?  'Al ' . $vote_count .' persoon heeft gestemd!' : 'Al ' . $vote_count . ' personen hebben gestemd!';
    $variables['block']->subject = $block_title;
  }
}

function opknappertje_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'hero_block':
      $block['subject'] = '<none>';
      $block['content'] = _opknappertje_hero_block_content(arg(1), arg(2));
    break;
    case 'hero_block_default':
      $block['subject'] = '<none>';
      $block['content'] = _opknappertje_hero_block_default_content(arg(1));
    break;
    case 'hero_block_campaign':
      $block['subject'] = '<none>';
      $block['content'] = _opknappertje_hero_block_campaign_content(arg(1));
    break;
    case 'hero_block_campaign_phases':
      $block['subject'] = '';
      $block['content'] = _opknappertje_hero_block_campaign_phases_content();
    break;
    case 'hero_block_campaign_countdown':
      $block['subject'] = t('De Deadline');
      $content = _opknappertje_hero_block_campaign_countdown_callback();
      if ($content != FALSE) {
        $block['content'] = $content;
      }
      else {
        $block['content'] = t('De stemperiode moet nog starten.');
      }
    break;
    case 'facebook_comments_content':
      $block['subject'] = t('Laat een berichtje achter');
      $block['content'] = _opknappertje_facebook_comments_content(arg(1));
    break;
  }

  return $block;
}

function _opknappertje_hero_block_campaign_phases_content() {
  $active_signup_campaign = _opknappertje_get_active_signup_period(time());
  $active_voting_campaign = _opknappertje_get_active_voting_period(time());

  if ($active_signup_campaign != FALSE && $active_voting_campaign == FALSE) {

    $campaign = node_load($active_signup_campaign->nid);

    $signup_start = format_date( $campaign->field_signup_date[LANGUAGE_NONE][0]['value'], 'custom', 'd F Y');
    $vote_start = format_date( $campaign->field_date[LANGUAGE_NONE][0]['value'], 'custom', 'd F Y');
    $vote_end = format_date( $campaign->field_date[LANGUAGE_NONE][0]['value2'], 'custom', 'd F Y');

    // Signup is active
    $markup = '<h2>Er kan nu worden ingezonden!</h2>';
    $markup .= '<div class="tile active"><a href="/inloggen">
    <i class="fa fa-envelope" aria-hidden="true"></i>
    Doe mee en stuur nu in!</a></div>';
    $markup .= '<div class="tile"><span>
    <i class="fa fa-thumbs-up" aria-hidden="true"></i>
    Openen stembus <br /><strong>' . $vote_start . '</strong></span></div>';
    $markup .= '<div class="tile"><span>
    <i class="fa fa-trophy" aria-hidden="true"></i>
    Winnaar bekend <br /><strong>' . $vote_end . '</strong></span></div>';

  }

  if ($active_signup_campaign == FALSE && $active_voting_campaign != FALSE) {
    $campaign = node_load($active_voting_campaign->nid);
    $path = drupal_get_path_alias('node/' . $campaign->nid);
    $vote_end = format_date( $campaign->field_date[LANGUAGE_NONE][0]['value2'], 'custom', 'd F Y');

    // Voting is active
    $markup = '<h2>Er kan nu worden gestemd!</h2>';
    $markup .= '<div class="tile disabled"><span>
    <i class="fa fa-envelope" aria-hidden="true"></i>
    De inzendtermijn is verstreken.</span></div>';
    $markup .= '<div class="tile active"><a href="'.$path.'">
    <i class="fa fa-thumbs-up" aria-hidden="true"></i>
    Stem nu op je favoriet!</a></div>';
    $markup .= '<div class="tile"><span>
    <i class="fa fa-trophy" aria-hidden="true"></i>
    Winnaar bekend <br /><strong>' . $vote_end . '</strong></span></div>';
  }

  if ($active_signup_campaign == FALSE && $active_voting_campaign == FALSE) {

    // Get the latest campaign
    $campaign = _opknappertje_get_latest_campaign(time());

    // Get the referenced nodes
    $winner = _opknappertje_get_campaign_winner($campaign->nid);

    // Future campaign
    $markup = '<h2>Op het moment zijn er geen actieve campagnes.</h2>';
    $markup .= '<div class="tile disabled"><span>
    <i class="fa fa-envelope" aria-hidden="true"></i>
    De inzendtermijn is verstreken.</span></div>';
    $markup .= '<div class="tile disabled"><span>
    <i class="fa fa-thumbs-up" aria-hidden="true"></i>
    De stemperiode is verstreken.</span></div>';
    $markup .= '<div class="tile winner"><span>
    <i class="fa fa-trophy" aria-hidden="true"></i>
    Laatste winnaar <br /><strong>' . $winner . '</strong></span></div>';
  }

  return $markup;
}

function _opknappertje_facebook_comments_content($nid) {
  $path = _create_fb_share_link($nid);

  $markup = '<div class="fb-comments" data-href="' . $path . '" data-numposts="5"></div>';

  return $markup;
}


function _opknappertje_image_from_fid($fid, $image_style = 'thumbnail') {
  $uri = file_load($fid)->uri;
  $image_url = image_style_url($image_style, $uri);

  return $image_url;
}

function _opknappertje_create_contribution_info_array($node, $user) {
  // Get contribution image
  $image_url = image_style_url('medium', $node->field_contribution[LANGUAGE_NONE][0]['uri']);

  // Get user data
  $first_name = ($user->field_first_name) ? $user->field_first_name[LANGUAGE_NONE][0]['value'] : '';
  $last_name = ($user->field_last_name) ? $user->field_last_name[LANGUAGE_NONE][0]['value'] : '';
  $city = ($user->field_city) ? $user->field_city[LANGUAGE_NONE][0]['value'] : '';

  // Get vote count
  $flag = flag_get_flag('vote');
  $vote_count = $flag->get_count($node->nid);

  // Add to array
  $contribution_info = array(
    'path' => drupal_lookup_path('alias', 'node/' . $node->nid),
    'image_url' => $image_url,
    'first_name' => $first_name,
    'last_name' => $last_name,
    'city' => $city,
    'vote_count' => $vote_count,
    'created' => $node->created,
    'picture' => _opknappertje_image_from_fid($node->picture),
  );

  return $contribution_info;

}

function secondsToTime($timestamp) {
    $now = time();
    $dtF = new \DateTime("@$now");
    $dtT = new \DateTime("@$timestamp");

    $days = $dtF->diff($dtT)->format('%a');
    $hours = $dtF->diff($dtT)->format('%h');
    $minutes = $dtF->diff($dtT)->format('%i');
    $seconds = $dtF->diff($dtT)->format('%s');

    $togo = array(
      'timestamp' => $timestamp,
      'days' => $days,
      'hours' => $hours,
      'minutes' => $minutes,
      'seconds' => $seconds,
    );

    return $togo;
}

function _opknappertje_hero_block_campaign_countdown_callback() {
  // Load active campaign
  $node = _opknappertje_get_active_voting_period(time());

  if (!empty($node)) {
    date_default_timezone_set('Europe/Amsterdam');

    // Get deadline
    $node = node_load($node->nid);

    $date = date('d:h:i:s', $node->field_date[LANGUAGE_NONE][0]['value2']);
    $end_date = secondsToTime( $node->field_date[LANGUAGE_NONE][0]['value2'] );

    $markup = '';

    if ($end_date['days'] > 0) {
      $end_date['days'] = sprintf("%02d", $end_date['days']);
      $end_date['hours'] = sprintf("%02d", $end_date['hours']);
      $end_date['minutes'] = sprintf("%02d", $end_date['minutes']);

      $markup = '<div class="clock flip-clock-wrapper">
      <span class="flip-clock-divider days">
      <span class="flip-clock-label">Days</span></span>
      <ul class="flip ">
        <li class="flip-clock-active"><a href="#"><div class="up"><div class="shadow"></div><div class="inn">'.substr($end_date['days'],0,1).'</div></div><div class="down"><div class="shadow"></div><div class="inn">'.substr($end_date['days'],0,1).'</div></div></a></li>
      </ul>
      <ul class="flip ">
        <li class="flip-clock-active"><a href="#"><div class="up"><div class="shadow"></div><div class="inn">'.substr($end_date['days'],1,2).'</div></div><div class="down"><div class="shadow"></div><div class="inn">'.substr($end_date['days'],1,2).'</div></div></a></li>
      </ul>

      <span class="flip-clock-divider hours"><span class="flip-clock-label">Hours</span><span class="flip-clock-dot top"></span><span class="flip-clock-dot bottom"></span></span>
      <ul class="flip ">
        <li class="flip-clock-active"><a href="#"><div class="up"><div class="shadow"></div><div class="inn">'.substr($end_date['hours'],0,1).'</div></div><div class="down"><div class="shadow"></div><div class="inn">'.substr($end_date['hours'],0,1).'</div></div></a></li>
      </ul>
      <ul class="flip ">
        <li class="flip-clock-active"><a href="#"><div class="up"><div class="shadow"></div><div class="inn">'.substr($end_date['hours'],1,2).'</div></div><div class="down"><div class="shadow"></div><div class="inn">'.substr($end_date['hours'],1,2).'</div></div></a></li>
      </ul>

      <span class="flip-clock-divider minutes"><span class="flip-clock-label">Minutes</span><span class="flip-clock-dot top"></span><span class="flip-clock-dot bottom"></span></span>
      <ul class="flip ">
        <li class="flip-clock-active"><a href="#"><div class="up"><div class="shadow"></div><div class="inn">'.substr($end_date['minutes'],0,1).'</div></div><div class="down"><div class="shadow"></div><div class="inn">'.substr($end_date['minutes'],0,1).'</div></div></a></li>
      </ul>
      <ul class="flip ">
        <li class="flip-clock-active"><a href="#"><div class="up"><div class="shadow"></div><div class="inn">'.substr($end_date['minutes'],1,2).'</div></div><div class="down"><div class="shadow"></div><div class="inn">'.substr($end_date['minutes'],1,2).'</div></div></a></li>
      </ul>

      </div>';
    } else {
      $markup = '<div data-timestamp="' . $end_date['timestamp'] . '" class="clock"></div>';
    }
    return $markup;
  } else {
    return FALSE;
  }


}

function _opknappertje_hero_block_campaign_content($nid) {
  if (is_numeric($nid)) {
    $node = node_load($nid);

    $text = _opknappertje_campaign_time_left(time(), $node->field_signup_date[LANGUAGE_NONE][0], $node->field_date[LANGUAGE_NONE][0]);

    $status = _opknappertje_campaign_status(time(), $node->field_signup_date[LANGUAGE_NONE][0], $node->field_date[LANGUAGE_NONE][0]);

    $markup = '<div class="content"><h2>' . $text . '</h2>';

    if ($status == 'signup') {
      if (user_is_logged_in()) {
        $markup .= '<ul><li>
                    <a class="btn btn-green" href="/node/add/contribution">Doe nu mee!</a>
                    </li></ul>';
      }
      else {
        $markup .= '<ul><li>
                    <a class="btn btn-green" href="/inloggen">Inloggen om mee te doen!</a>
                    </li></ul>';
      }
    }
    if ($status == 'voting') {
      $markup .= '<div class="view-filters">
                    <span>Sorteer:</span>
                    <button class="btn btn-red sort-by-name" data-sort-value="name">Naam</button>
                    <button class="btn btn-red sort-by-votes" data-sort-value="votes">Stemmen</button>
                    <button class="btn btn-red sort-by-created" data-sort-value="created">Datum</button>
                  </div>';
    }
    else {
      $markup .= '<div class="view-filters">
                    <span>Sorteer:</span>
                    <button class="btn btn-red sort-by-name" data-sort-value="name">Naam</button>
                    <button class="btn btn-red sort-by-votes" data-sort-value="votes">Stemmen</button>
                    <button class="btn btn-red sort-by-created" data-sort-value="created">Datum</button>
                  </div>';
    }
    $markup .= '</div>';

    return $markup;
  }

}

function _opknappertje_get_campaign_winner($campaign_id){
  $query = db_query("SELECT field_contributions_target_id FROM {field_data_field_contributions} WHERE entity_id = :entity_id", array(':entity_id' => $campaign_id));
	$result = $query->fetchAllAssoc('field_contributions_target_id');

  foreach($result as $contrib) {
    // Get the flag values
    $flag = flag_get_flag('vote');
    $vote_count = $flag->get_count($contrib->field_contributions_target_id);
    $contribution_votes[$contrib->field_contributions_target_id] = $vote_count;
  }

  if (!empty($contribution_votes)) {
    // Sort and grab highest
    arsort($contribution_votes);
    $winning_contrib = key($contribution_votes);

    // Get the author and set $winner
    $winning_contrib = node_load($winning_contrib);
    $winning_user = user_load($winning_contrib->uid);

    return $winning_user->realname;
  } else {
    return 'Onbekend';
  }

}

function _opknappertje_get_latest_campaign($current_time){
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'campaign')
    ->propertyCondition('status', NODE_PUBLISHED) // Make sure to select a published campaign
    ->fieldCondition('field_date', 'value2', $current_time, '<') // Condition to make sure not to load an active campaign
    ->propertyOrderBy('created', 'DESC') // Make sure to select the newest campaign in the array
    ->range(0, 1); // Make sure to select only one

  $result = $query->execute();

  if (isset($result['node'])) {
    foreach ($result['node'] as $campaign) {
      // Return the campaign
      return $campaign;
    }
  } else {
    // Return false when there are no active signup period
    return FALSE;
  }

}

function _opknappertje_get_active_signup_period($current_time){
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'campaign')
    ->propertyCondition('status', NODE_PUBLISHED) // Make sure to select a published campaign
    ->fieldCondition('field_signup_date', 'value', $current_time, '<') // Make sure to select an active campaign
    ->fieldCondition('field_signup_date', 'value2', $current_time, '>') // Make sure to select an active campaign
    ->propertyOrderBy('created', 'DESC') // Make sure to select the newest campaign in the array
    ->range(0, 1); // Make sure to select only one

  $result = $query->execute();

  if (isset($result['node'])) {
    foreach ($result['node'] as $campaign) {

      // Return the campaign
      return $campaign;
    }
  } else {
    // Return false when there are no active signup period
    return FALSE;
  }

}

function _opknappertje_get_active_voting_period($current_time){
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'campaign')
    ->propertyCondition('status', NODE_PUBLISHED) // Make sure to select a published campaign
    ->fieldCondition('field_date', 'value', $current_time, '<') // Make sure to select an active campaign
    ->fieldCondition('field_date', 'value2', $current_time, '>') // Make sure to select an active campaign
    ->propertyOrderBy('created', 'DESC') // Make sure to select the newest campaign in the array
    ->range(0, 1); // Make sure to select only one

  $result = $query->execute();

  if (isset($result['node'])) {
    foreach ($result['node'] as $campaign) {
      // Return the campaign
      return $campaign;
    }
  } else {
    // Return false when there are no active campaigns
    return FALSE;
  }

}

function _opknappertje_user_contribution_unique_validate($node, $active_campaign){
  // Load the current user
  global $user;

  $validation = TRUE;

  if ($active_campaign != FALSE) {
    // Get the active campaign node
    $node = node_load($active_campaign->nid);

    // Loop through contributions if they exist
    if (!empty($node->field_contributions[LANGUAGE_NONE])) {
      foreach ($node->field_contributions[LANGUAGE_NONE] as $contribution) {
        // Load the contrib
        $contribution = node_load($contribution['target_id']);

        // See if node with current uid exists
        if ($contribution->uid == $user->uid) {
          $validation = FALSE;
        }
      }
    }
  }

  return $validation;
}

function opknappertje_node_validate($node, $form, &$form_state) {
  if ($node->type === 'contribution' && arg(1) == 'add') {
    $active_campaign = _opknappertje_get_active_signup_period($node->created);
    $unique_contribution = _opknappertje_user_contribution_unique_validate($node, $active_campaign);

    if ($active_campaign == FALSE) {
      form_set_error('field_contribution', t('Sorry, de inschrijfperiode is verlopen.'));

    }
    if ($unique_contribution == FALSE) {
      form_set_error('field_contribution', t('Sorry, je mag maar 1x per campagne een inzending plaatsen.'));

    }

  }

}

function _opknappertje_hero_block_content($nid, $action) {
  $markup ='';

  if (is_numeric($nid) && $action != 'edit' && $action != 'delete') {
    $node = node_load($nid);
    $user = user_load($node->uid);

    if ( $node->type === 'contribution' ) {
      $uri = $node->field_contribution[LANGUAGE_NONE][0]['uri'];
      $image_path = image_style_url('large', $uri);
      $active_voting_campaign = _opknappertje_get_active_voting_period(time());

      if ( user_is_logged_in() && $active_voting_campaign != FALSE) {
        $primary_action = flag_create_link('vote', $node->nid);
      }
      elseif ($active_voting_campaign != FALSE) {
        $primary_action = '<a class="btn btn-red" href="/inloggen">Stem nu!</a>';
      }
      else {
        $primary_action = '';
      }

      $signup_campaign = _opknappertje_get_active_signup_period(time());
      $voting_campaign = _opknappertje_get_active_voting_period(time());

      // This is a signup campaign
      if ($signup_campaign != FALSE && $voting_campaign == FALSE) {
        $markup = '
        <div class="content"><h1><small>Een kijkje in de keuken van</small><br />' . $user->field_first_name[LANGUAGE_NONE][0]['value']  . ' ' . $user->field_last_name[LANGUAGE_NONE][0]['value'] . '</h1>
        <div class="image"><img src="' . $image_path .'" alt="" /></div></div>
        ';
      }

      // This is a voting campaign
      if ($signup_campaign == FALSE && $voting_campaign != FALSE) {
        $markup = '
        <div class="content"><h1><small>Een kijkje in de keuken van</small><br />' . $user->field_first_name[LANGUAGE_NONE][0]['value']  . ' ' . $user->field_last_name[LANGUAGE_NONE][0]['value'] . '</h1>
          <ul>
            <li>' . $primary_action . '</li>
            <li>
              <a class="btn btn-large btn-facebook" href="' . _create_fb_share_link($node->nid) . '" target="_blank">Deel op Facebook!</a>
            </li>
          </ul>
        <p>Login en stem of deel deze inzending op Facebook om stemmen te verzamelen.</p>
        <div class="image"><img src="' . $image_path .'" alt="" /></div></div>
        ';
      }

    }
  }

  return $markup;
}

function _opknappertje_hero_block_default_content($nid) {
  $markup = '<div class="content"><h1>Knap je keuken op!</h1>
  <p>Log in met je Facebook account, plaats een foto van je keuken en deel je inzending op Facebook om je vrienden te laten stemmen.</p>';

  // Create carousel here.
  $node = node_load($nid);

  if (!empty($node->field_carousel[LANGUAGE_NONE])) {
    $markup .= '<div id="carousel" class="carousel slide container" data-ride="carousel">
    <ol class="carousel-indicators">';

    foreach($node->field_carousel[LANGUAGE_NONE] as $key => $item) {
      $image_url = image_style_url('carousel', $item['uri']);

      if ($key == 0) {
        $markup .= '<li data-target="#carousel" data-slide-to="'.$key.'" class="active"></li>';
      }
      else {
        $markup .= '<li data-target="#carousel" data-slide-to="'.$key.'"></li>';
      }
    }

    $markup .= '</ol>
    <div class="carousel-inner" role="listbox">';

    foreach($node->field_carousel[LANGUAGE_NONE] as $key => $item) {
      $image_url = image_style_url('carousel', $item['uri']);

      if ($key == 0) {
        $markup .= '<div class="item active"><img src="'.$image_url.'" alt="'.$item['alt'].'" /></div>';
      }
      else {
        $markup .= '<div class="item"><img src="'.$image_url.'" alt="'.$item['alt'].'" /></div>';
      }

    }

    $markup .= '</div></div>';
  }

  if (user_is_logged_in()) {
    $markup .= '<ul><li><a href="/node/add/contribution" class="btn btn-green">Doe direct mee!</a></li>
    <li><a href="/campagnes" class="btn btn-green">Onze campagnes</a></li></ul></div>';
  }
  else {
    $markup .= '<ul><li><a href="/inloggen" class="btn btn-green">Log in om mee te doen!</a></li>
    <li><a href="/campagnes" class="btn btn-green">Onze campagnes</a></li></ul></div>';
  }

  return $markup;
}

function opknappertje_node_delete($node) {
  if ($node->type === 'contribution') {
    $nid = $node->nid;

    // Get all the existing campagins
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'campaign');

    $result = $query->execute();

    if (isset($result['node'])) {

      // Loop through the campaigns
      foreach ($result['node'] as $campaign) {
        // Load the full campaign node
        $campaign = node_load($campaign->nid);
        // Get the contributions
        $contributions = $campaign->field_contributions[LANGUAGE_NONE];
        // Unset reference to this node
        foreach ($campaign->field_contributions[LANGUAGE_NONE] as $key => $contribution) {
          if ($contribution['target_id'] == $nid) {
              unset($campaign->field_contributions[LANGUAGE_NONE][$key]);
          }
        }
        // Save the campaign
        node_save($campaign);
      }
    }
  }
}

function opknappertje_node_insert($node) {
  if ($node->type === 'contribution') {
    $campaign =_opknappertje_get_active_signup_period($node->created);
    $campaign = node_load($campaign->nid);
    $campaign->field_contributions[LANGUAGE_NONE][] = array(
      'target_id' => $node->nid,
    );

    node_save($campaign);

    drupal_set_message(t('Gefeliciteerd, je inzending is aan de campagne toegevoegd!'), 'status');

  }

}

function _opknappertje_campaign_time_left($current, $signup_date, $voting_date) {
  $output = '';

  if ($voting_date['value'] < $current && $voting_date['value2'] > $current ){
    $days = $voting_date['value2'] - $current;

    $output = t('Je kunt nog stemmen tot @end_time', array('@end_time' => format_date( $voting_date['value2'], 'custom', 'd F H:i') ));
  }
  elseif ($signup_date['value'] < $current && $signup_date['value2'] > $current ){
    $days = $signup_date['value2'] - $current;

    $output = t('Je kunt je inschrijven tot @end_time', array('@end_time' => format_date( $signup_date['value2'], 'custom', 'd F H:i') ));
  }
  else {
    $output = t('Helaas, deze campagne is al afgelopen!');
  }

  return $output;
}


function _create_fb_share_link($nid) {
  global $base_url;

  $path = drupal_get_path_alias('node/' . $nid);
  $path_alias = 'https://www.facebook.com/dialog/share?app_id=177969065690482&display=popup&href=' . htmlentities( $base_url . '/' . $path ) . '&redirect_uri=' . htmlentities( $base_url . '/' . $path);

  return $path_alias;
}

function _opknappertje_campaign_status($current, $signup_date, $voting_date) {
  if ($current > $signup_date['value'] && $current < $signup_date['value2']) {
    $status = 'signup';
  }
  elseif ($current > $voting_date['value'] && $current < $voting_date['value2']) {
    $status = 'voting';
  }
  else {
    $status = FALSE;
  }

  return $status;
}

function opknappertje_preprocess_node(&$variables){
  if ($variables['type'] === 'campaign' && $variables['view_mode'] === 'teaser') {

    $variables['campaign_info'] = array(
      'start_date' => $variables['field_date'][0]['value'],
      'end_date' => $variables['field_date'][0]['value2'],
      'message' => 'Bekijk de inzendingen voor deze campagne.',
      'status' => 'active',
    );

  }
  if ($variables['type'] === 'campaign' && $variables['view_mode'] === 'full') {

    // @todo This check for grid rendering is worthless
    if (isset($variables['field_contributions'])) {

      foreach ($variables['field_contributions'] as $contribution) {
        $node = $contribution['entity'];
        $user = user_load($node->uid);

        // Get contribution image
        $image_url = image_style_url('medium', $node->field_contribution[LANGUAGE_NONE][0]['uri']);

        // Get user data
        $first_name = ($user->field_first_name) ? $user->field_first_name[LANGUAGE_NONE][0]['value'] : '';
        $last_name = ($user->field_last_name) ? $user->field_last_name[LANGUAGE_NONE][0]['value'] : '';
        $city = ($user->field_city) ? $user->field_city[LANGUAGE_NONE][0]['value'] : '';

        // Get vote count
        $flag = flag_get_flag('vote');
        $vote_count = $flag->get_count($node->nid);

        // Add to variables array
        $variables['contributions'][] = array(
          'path' => drupal_lookup_path('alias', 'node/' . $node->nid),
          'image_url' => $image_url,
          'first_name' => $first_name,
          'last_name' => $last_name,
          'city' => $city,
          'vote_count' => $vote_count,
          'created' => $node->created,
        );

      }

    } else {
      drupal_set_message(t('Er zijn nog geen inzendingen voor deze campagne'), 'warning');
    }

  }

  if ($variables['type'] === 'contribution') {
    $user = user_load($variables['uid']);

    if ($user->field_first_name) {
      $variables['user_profile']['first_name'] = $user->field_first_name[LANGUAGE_NONE][0]['value'];
    }
    if ($user->field_last_name) {
      $variables['user_profile']['last_name'] = $user->field_last_name[LANGUAGE_NONE][0]['value'];
    }
    // if ($variables['user']->picture > 0) {
    //   $file = file_load($variables['user']->picture);
    //   $variables['user_profile']['picture'] = image_style_url('medium', $file->uri);
    // }
    if ($user->field_city) {
      $variables['user_profile']['city'] = $user->field_city[LANGUAGE_NONE][0]['value'];
    }

    // Get vote count
    $flag = flag_get_flag('vote');
    $variables['contribution']['vote_count'] = $flag->get_count($variables['nid']);

    // Get node url
    global $base_url;
    $variables['contribution']['url'] = $base_url . $variables['node_url'];
  }

  if ($variables['type'] === 'contribution' && $variables['view_mode'] === 'teaser') {
    $variables['contribution']['image'] = image_style_url('medium', $variables['field_contribution'][0]['uri']);
  }

  if ($variables['type'] === 'contribution' && $variables['view_mode'] === 'full') {

    global $base_url;

    $variables['alias'] = drupal_get_path_alias('node/' . $variables['nid']);
    $variables['contribution']['image'] = image_style_url('large', $variables['field_contribution'][0]['uri']);
    $variables['contribution']['body'] = $variables['body'][0]['value'];

    $voting_campaign = _opknappertje_get_active_voting_period(time());
    $signup_campaign = _opknappertje_get_active_signup_period(time());

    // This is a signup campaign
    if ($signup_campaign != FALSE && $voting_campaign == FALSE) {
      $node = node_load($signup_campaign->nid);
      $variables['campaign_status'] = _opknappertje_campaign_status(time(), $node->field_signup_date[LANGUAGE_NONE][0], $node->field_date[LANGUAGE_NONE][0]);
      $variables['campaign_voting_start'] = format_date($node->field_date[LANGUAGE_NONE][0]['value'], 'custom', 'd F H:i');
    }

    // This is a voting campaign
    if ($signup_campaign == FALSE && $voting_campaign != FALSE) {
      $node = node_load($voting_campaign->nid);
      $variables['campaign_status'] = _opknappertje_campaign_status(time(), $node->field_signup_date[LANGUAGE_NONE][0], $node->field_date[LANGUAGE_NONE][0]);
    }

    $og_url = array(
  	 '#tag' => 'meta',
  	 '#attributes' => array(
  		 'property' => 'og:url',
  		 'content' => $base_url . '/' . $variables['alias']
  	 ),
  	);

  	drupal_add_html_head($og_url, 'og_url');

    $og_image = array(
		  '#tag' => 'meta',
		  '#attributes' => array(
		    'property' => 'og:image',
		    'content' => $variables['contribution']['image'],
		  ),
		);

		drupal_add_html_head($og_image, 'og_image');

		$og_title = array(
		 '#tag' => 'meta',
		 '#attributes' => array(
			 'property' => 'og:title',
			 'content' => $variables['title'],
		 ),
		);

		drupal_add_html_head($og_title, 'og_title');

		$og_description = array(
		 '#tag' => 'meta',
		 '#attributes' => array(
			 'property' => 'og:description',
			 'content' => 'Stem op de keuken van ' . $variables['user_profile']['first_name'] . '! ' . $variables['user_profile']['first_name'] . ' maakt dan meer kans om een renovatiecheque t.w.v. &euro; 750,- te winnen.',
		 ),
		);

		drupal_add_html_head($og_description, 'og_description');

    $fb_app_id = array(
     '#tag' => 'meta',
     '#attributes' => array(
       'property' => 'fb:app_id',
       'content' => ''
     ),
    );

    drupal_add_html_head($fb_app_id, 'fb_app_id');

    $variables['contribution']['fb_share_link'] = _create_fb_share_link($variables['nid']);
  }
}

function opknappertje_preprocess_page(&$vars) {
  // Do we have a node?
  if (isset($vars['node'])) {
    // Ref suggestions cuz it's stupid long.
    $suggests = &$vars['theme_hook_suggestions'];

    // Get path arguments.
    $args = arg();

    // Remove first argument of "node".
    unset($args[0]);

    // Set type.
    $type = "page__type_{$vars['node']->type}";

    // Bring it all together.
    $suggests = array_merge($suggests, array($type), theme_get_suggestions($args, $type) );
  }
}
?>
